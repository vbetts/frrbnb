from flask import request, url_for, g
from flask_api import FlaskAPI, status, exceptions
from flask_cors import CORS
from handle_data import query_db
from constants import CITIES, PROPERTY_TYPES, PET_TYPES


def validate_required_fields(fields):
    """
        Validates form input for create account function
        :param      fields:     form input data from the create account page
        :type       fields:     dict
                        keys:   
                            city_id         int 
                            email           string
                            name            string
                            password        string
                            password_retype string
                            property_type   int
                            is_host         bool
                            pets            array of dicts
        :return     error messages generated by validation checks
        :rtype      array
    """
    messages = []
    message_template = "'{}' is a required field"
    if fields["city_id"] == "":
        messages.append(message_template.format("City"))
    if fields["email"] == "":
        messages.append(message_template.format("Email"))
    elif "@" not in fields["email"]:
        messages.append("Invalid email")
    else:
        email_sql = "SELECT id FROM accounts WHERE email=?"
        email_res = query_db(email_sql, (fields["email"],), True)
        if email_res is not None:
            m = "An account is already associated with the email: {}"
            m = m.format(fields["email"])
            messages.append(m)
    if fields["name"] == "":
        messages.append(message_template.format("Name"))
    if fields["password"] == "":
        messages.append(message_template.format("Password"))
    if len(fields["password"]) <= 3: 
       messages.append("Password must be greater than 3 characters") 
    if fields["password"] != fields["password_retype"]:
        messages.append("The password fields do not match")
    if fields["is_host"] == True: 
        if fields["property_type"] == "":
            messages.append(message_template.format("Property Type") + " for host accounts")
        else:
            messages.extend(validate_pets(fields["pets"]))
    return messages

def validate_search(data):
    """
        Validates form input for create account function
        :param      data:   form input data from the search on the home page
        :type       data:   dict
                        keys:   
                            petType         int 
                            propertyType    int
                            city_id         int
        :return     error messages generated by validation checks
        :rtype      array
    """
    messages = []
    if data["petType"] is not None and not (data["petType"] in PET_TYPES):
        messages.append("Please select a valid pet type")
    if data["propertyType"] is not None and not (data["propertyType"] in PROPERTY_TYPES):
        messages.append("Please select a valid property type")
    if data["city_id"] is not None and not (data["city_id"] in CITIES):
        messages.append("Please select a valid property city")
    return messages

def validate_pets(pets):
    """
        Validates form input for pet data
        :param      pets:   array of dicts containing pet data
        :type       pets:   array of dicts
                        keys:   
                            petType         int 
                            price           int
        :return     error messages generated by validation checks
        :rtype      array
    """
    messages = []
    if len(pets) == 0:
        messages.append("Host accounts must list at least one (1) type of eligible pet")
    for pet in pets:
        if pet["petType"] is None:
            messages.append("There was an error with your pet data: please select a pet type")
        else:
            pet_type = int(pet["petType"])
            if not (pet_type in PET_TYPES):
                messages.append("There was an error with your pet data: please select a valid pet type")
    return messages

def format_msgs(msg_array):
    """
        Formats messages returned by validation functions to be returned to the client side
        :param      msg_array:  array of message strings to be combined
        :type       msg_array:  array/list
        :return     messages with line breaks between each
        :rtype      string
    """
    message_str = "<br />".join(msg_array)
    return message_str


def is_host(account_id):
    sql = "SELECT is_host FROM accounts WHERE id=?"
    args = (account_id,)
    is_host = query_db(sql, args)
    if is_host["is_host"] == 0:
        return False
    else:
        return True

